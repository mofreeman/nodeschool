
 LEARN YOU THE NODE.JS FOR MUCH WIN!
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 MAKE IT MODULAR
 Exercise 6 of 13

This problem is the same as the previous but introduces the concept of modules. You will need to create two files to solve this.

Create a program that prints a list of files in a given directory, filtered by the extension of the files. The first argument is the directory name and the second argument is the extension filter. Print the list of files (one file per line) to the console. You must use asynchronous I/O.

You must write a module file to do most of the work. The module must export a single function that takes three arguments: the directory name, the filename extension string and a callback function, in that order. The filename extension argument must be the same as was passed to your program. i.e. don't turn it into a RegExp or prefix with "." or do anything else but pass it to your module where you can do what you need to make your filter work.

The callback function must be called using the idiomatic node(err, data) convention. This convention stipulates that unless there's an error, the first argument passed to the callback will be null, and the second will be your data. In this case, the data will be your filtered list of files, as an Array. If you receive an error, e.g. from your call to  fs.readdir(), the callback must be called with the error, and only the error, as the first argument.

You must not print directly to the console from your module file, only from your original program.

In the case of an error bubbling up to your original program file, simply check for it and print an informative message to the console.

These four things are the contract that your module must follow.

  * Export a single function that takes exactly the arguments described.
  * Call the callback exactly once with an error or some data as described.
  * Don't change anything else, like global variables or stdout.
  * Handle all the errors that may occur and pass them to the callback.

The benefit of having a contract is that your module can be used by anyone who expects this contract. So your module could be used by anyone else who does learnyounode, or the verifier, and just work.

-------------------------------------------------------------------------------

## HINTS

Create a new module by creating a new file that just contains your directory reading and filtering function. To define a single function export, you assign your function to the module.exports object, overwriting what is already there:

    [37mmodule[39m[32m.[39m[37mexports[39m [93m=[39m [94mfunction[39m [90m([39m[37margs[39m[90m)[39m [33m{[39m [90m/* ... */[39m [33m}[39m

Or you can use a named function and assign the name.

To use your new module in your original program file, use the require() call in the same way that you require('fs') to load the fs module. The only difference is that for local modules must be prefixed with './'. So, if your file is named mymodule.js then:

    [32mvar[39m [37mmymodule[39m [93m=[39m [37mrequire[39m[90m([39m[92m'./mymodule.js'[39m[90m)[39m

The '.js' is optional here and you will often see it omitted.

You now have the module.exports object in your module assigned to the mymodule variable. Since you are exporting a single function, mymodule is a function you can call!

Also keep in mind that it is idiomatic to check for errors and do early-returns within callback functions:

    [94mfunction[39m [37mbar[39m [90m([39m[37mcallback[39m[90m)[39m [33m{[39m
      [37mfoo[39m[90m([39m[94mfunction[39m [90m([39m[37merr[39m[32m,[39m [37mdata[39m[90m)[39m [33m{[39m
        [94mif[39m [90m([39m[37merr[39m[90m)[39m
          [31mreturn[39m [37mcallback[39m[90m([39m[37merr[39m[90m)[39m [90m// early return[39m
    
        [90m// ... no error, continue doing cool things with `data`[39m
    
        [90m// all went well, call callback with `null` for the error argument[39m
    
        [37mcallback[39m[90m([39m[90mnull[39m[32m,[39m [37mdata[39m[90m)[39m
      [33m}[39m[90m)[39m
    [33m}[39m

-------------------------------------------------------------------------------

 Â» To print these instructions again, run: learnyounode print
 Â» To execute your program in a test environment, run: learnyounode run program.js
 Â» To verify your program, run: learnyounode verify program.js
 Â» For help run: learnyounode help


